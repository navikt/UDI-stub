#version: 2
#defaults:
#  docker:
#    - image: circleci/openjdk:8-jdk
#jobs:
#  build:
#    docker:
#      - image: circleci/openjdk:8-jdk
#    steps:
#      - checkout
#      - run:
#          name: Create workspace
#          command: mkdir -p /tmp/workspace
#      - restore_cache:
#          key: udi-stub-{{ checksum "pom.xml" }}
#      #      - run:
#      #          mvn dependency:go-offline
#      - save_cache:
#          paths:
#            - ~/.m2
#          key: udi-stub-{{ checksum "pom.xml" }}
#      - run: mvn package
#      - store_test_results:
#          path: target/surefire-reports
#      - run:
#          name: Copy cloud jar to workspace
#          command: cp udi-cloud/target/*.jar /tmp/workspace
#      - run:
#          name: Copy core jar to workspace
#          command: cp udi-core/target/*.jar /tmp/workspace
#      - persist_to_workspace:
#          root: /tmp/workspace
#          paths: '*.jar'
#
#      - store_artifacts:
#          path: udi-cloud/target/*.jar
#          destination: udi-stub.jar
#
#  release:
#    docker:
#      - image: circleci/openjdk:8-jdk
#    steps:
#      - checkout
#      - setup_remote_docker
#      - run:
#          name: Generate version number and docker image tags
#          command: |
#            mkdir /tmp/workspace
#            export MAJOR_VERSION="$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)"
#            export RELEASE_VERSION=$MAJOR_VERSION.$CIRCLE_BUILD_NUM-$CIRCLE_SHA1
#            echo "export RELEASE_VERSION=$RELEASE_VERSION" >> /tmp/workspace/properties.env
#            echo "export DOCKER_TAG=\"udi-stub:$MAJOR_VERSION\"" >> /tmp/workspace/properties.env
#            cat /tmp/workspace/properties.env >> $BASH_ENV
#      - run:
#          name: Set artifact version
#          command: mvn versions:set -B -DnewVersion=$RELEASE_VERSION
#      - run:
#          name: Build and run tests
#          command: mvn clean package
#      - run:
#          name: Build docker image
#          command: docker build --build-arg version=$RELEASE_VERSION --build-arg app_name=$CIRCLE_PROJECT_REPONAME
#            -t docker.pkg.github.com/$DOCKER_TAG .
#      - run:
#          name: Docker push
#          command: |
#            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.pkg.github.com
#            echo "Pushing with tag $DOCKER_TAG"
#            docker push docker.pkg.github.com/$DOCKER_TAG
#      - persist_to_workspace:
#          root: /tmp/workspace
#          paths:
#            - properties.env
#  deploy_preprod:
#    docker:
#      - image: navikt/deployment-cli:v0.1.6
#    steps:
#      - attach_workspace:
#          at: /tmp/workspace
#      - checkout
#      - run:
#          name: Print env variables persisted
#          command: |
#            export RUST_BACKTRACE=1
#            cat /tmp/workspace/properties.env
#      - run:
#          name: Set up environment variables
#          command: cat /tmp/workspace/properties.env >> $BASH_ENV
#      - run:
#          name: Create github deployment for dev-fss
#          command: source $BASH_ENV; deployment-cli deploy create -u $DOCKER_USERNAME -p $DOCKER_PASSWORD --cluster=dev-fss
#            --team=Synt -r=nais.yaml --version=${DOCKER_TAG} --repository=udi-stub
#workflows:
#  version: 2
#  build_and_release:
#    jobs:
#      - build
#      - release:
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
#      - deploy_preprod:
#          requires:
#            - build
#            - release
#          filters:
#            branches:
#              only: master


version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generate version number and docker image tags
          command: |
            mkdir /tmp/workspace
            export RELEASE_VERSION=$CIRCLE_SHA1-$CIRCLE_BUILD_NUM
            echo "export RELEASE_VERSION=$RELEASE_VERSION" >> /tmp/workspace/properties.env
            echo "export DOCKER_TAG=\"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$RELEASE_VERSION\"" >> /tmp/workspace/properties.env
            # echo "export DOCKER_TAG=\"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$RELEASE_VERSION\"" >> /tmp/workspace/properties.env
            cat /tmp/workspace/properties.env >> $BASH_ENV
      - run:
          name: Install required dependencies
          command: |
            mvn package
      - store_artifacts:
          path: target/udi-stub
      - run:
          name: Build docker image
          command: docker build -t $DOCKER_TAG .
      - run:
          name: Docker push
          command: |
            # echo "$DEPLOYMENT_PASSWORD" | docker login -u "$DEPLOYMENT_USERNAME" --password-stdin docker.pkg.github.com
            # docker push docker.pkg.github.com/$DOCKER_TAG
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push $DOCKER_TAG
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - properties.env
  deploy:
    docker:
      - image: navikt/deployment-cli:44bb04ecc11c0e57ac539744411c70794dd31899
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Set up environment variables
          command: cat /tmp/workspace/properties.env >> $BASH_ENV
      - run:
          name: Create github deployment for dev-fss
          command: source $BASH_ENV; deployment-cli deploy create --cluster=dev-fss
            --team=orkestrator -r=nais.yaml --version=${DOCKER_TAG}
            --repository=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            tags:
              only: master
      - deploy:
          context: NAIS deployment
          filters:
            branches:
              only: master
          requires:
            - build
